const express = require('express');
const app = express();
const port = 3000;
const Handlebars = require('handlebars');
const fs = require('fs');

const StudentVue = require('studentvue.js');

app.get('/', (req, res) => {
    //login to studentvue
    StudentVue.login('https://mn-mvps-psv.edupoint.com/PXP2_Login_Student.aspx?regenerateSessionId=True', '2025roloa82', 'Drew2007$')
        .then(client => client.getGradebook())
        .then(response => {
            const jsonData = JSON.parse(response);
            const courses = jsonData.Gradebook.Courses.Course;

            // Create an object that contains only the relevant course data
            const courseData = courses.map(course => ({
                title: course.Title,
                marks: Array.isArray(course.Marks.Mark)
                    ? course.Marks.Mark.map(mark => ({
                        measure: mark.Measure,
                        type: mark.Type,
                        score: mark.CalculatedScoreString,
                        points: mark.PointsPossible
                    }))
                    : []
            }));


            // Write the course data to a JSON file
            fs.writeFile('grades.json', response, err => {
                if (err) {
                    console.error(err);
                    return;
                }
                console.log('Grades saved to grades.json');
            });

            // Render the HTML table
            let htmlTable = '<table>';
            htmlTable += '<tr><th>Course Name</th><th>Grade</th></tr>';
            courses.forEach(course => {
                const courseName = course.Title;

                //checks if 'Mark' is an array
                let marks = course.Marks.Mark;
                if (!Array.isArray(marks)) {
                    marks = [marks];
                }
                //maps 'marks' variable, names it 'grades'
                const grades = marks.map(mark => mark.CalculatedScoreString).join(', ');
                htmlTable += `<tr><td><a href="/course?id=${courseName}">${courseName}</a></td><td>${grades}</td></tr>`;
            });
            htmlTable += '</table>';

            // Read the template file
            fs.readFile('template.html', 'utf8', function (err, data) {
                if (err) {
                    console.log(err);
                    res.status(500).send('Error reading template file');
                }
                // Replace the placeholder with the table HTML string
                const outputHtml = data.replace('<div id="table-placeholder"></div>', htmlTable);

                // Send the output HTML to the client
                res.send(outputHtml);
            });
        })
        .catch(error => {
            console.error(error);
            res.send('Error occurred: ' + error.message);
        });

});

app.get('/course', (req, res) => {
    const courseId = req.query.id;

    fs.readFile('grades.json', (err, data) => {
        if (err) {
            console.error(err);
            res.status(500).send('Error reading grades file');
            return;
        }

        const jsonData = JSON.parse(data);
        const course = jsonData.Gradebook.Courses.Course.find(c => c.Title === courseId);
        if (!course) {
            res.status(404).send(`Course '${courseId}' not found`);
            return;
        }


        let marks = course.Marks.Mark.Assignments.Assignment;

        if (marks.length === 0) {
            res.status(404).send(`There are no current assignments for course '${courseId}'`);
            return;
        }

        const measure = marks[0].Measure;
        const type = marks[0].Type;
        const score = marks[0].Score;
        const points = marks[0].Points;

        // Read the template file
        fs.readFile('course_template.html', 'utf8', function (err, data) {
            if (err) {
                console.log(err);
                res.status(500).send('Error reading template file');
            }

            // Replace the placeholders with the course details
            const outputHtml = data.replace('${courseName}', courseId)
                .replace('${measure}', measure)
                .replace('${type}', type)
                .replace('${score}', score)
                .replace('${points}', points);

            // Send the output HTML to the client
            res.send(outputHtml);
        });
    });
});


app.listen(port, () => {
    console.log(`App listening at http://localhost:${port}`);
});

app.use(express.static('public'));